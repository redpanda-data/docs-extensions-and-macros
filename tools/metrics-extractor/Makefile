# Redpanda Metrics Extractor Makefile
# Extracts metrics from Redpanda source code using tree-sitter

SHELL := /bin/bash
TAG ?= dev
OUTPUT_DIR := autogenerated/$(TAG)/source-metrics
REDPANDA_REPO := https://github.com/redpanda-data/redpanda.git
REDPANDA_DIR := tmp/redpanda-$(TAG)
TREESITTER_DIR := tree-sitter/tree-sitter-cpp
PYTHON_VENV := venv
PYTHON := $(PYTHON_VENV)/bin/python
PIP := $(PYTHON_VENV)/bin/pip
TREE_SITTER := npx tree-sitter

.PHONY: all build clean setup-venv install-deps clone-redpanda extract-metrics help

all: build

help:
	@echo "Redpanda Metrics Extractor"
	@echo ""
	@echo "Available targets:"
	@echo "  build              - Extract metrics for specified TAG (default: dev)"
	@echo "  clean              - Clean temporary files and output"
	@echo "  setup-venv         - Set up Python virtual environment"
	@echo "  install-deps       - Install Python dependencies"
	@echo "  clone-redpanda     - Clone Redpanda repository"
	@echo "  extract-metrics    - Run metrics extraction"
	@echo ""
	@echo "Usage examples:"
	@echo "  make build TAG=v23.3.1"
	@echo "  make build TAG=dev"

build: setup-venv install-deps clone-redpanda treesitter extract-metrics

setup-venv:
	@echo "Setting up Python virtual environment..."
	python3 -m venv $(PYTHON_VENV)

install-deps: setup-venv
	@echo "Installing Python dependencies..."
	$(PIP) install --upgrade pip
	$(PIP) install -r requirements.txt

clone-redpanda:
	@echo "Cloning Redpanda repository (tag: $(TAG))..."
	@mkdir -p tmp
	@if [ -d "$(REDPANDA_DIR)" ]; then \
		echo "Repository already exists, updating..."; \
		cd $(REDPANDA_DIR) && git fetch --all --tags && git checkout $(TAG); \
		if git show-ref --verify --quiet refs/heads/$(TAG); then \
			git pull origin $(TAG); \
		fi; \
	else \
		echo "Checking if $(TAG) is a branch or tag..."; \
		if git ls-remote --heads $(REDPANDA_REPO) $(TAG) | grep -q $(TAG); then \
			echo "$(TAG) is a branch, cloning..."; \
			git clone --depth 1 --branch $(TAG) $(REDPANDA_REPO) $(REDPANDA_DIR); \
		elif git ls-remote --tags $(REDPANDA_REPO) $(TAG) | grep -q $(TAG); then \
			echo "$(TAG) is a tag, cloning and checking out..."; \
			git clone $(REDPANDA_REPO) $(REDPANDA_DIR); \
			cd $(REDPANDA_DIR) && git checkout $(TAG); \
		else \
			echo "Error: $(TAG) not found as branch or tag in $(REDPANDA_REPO)"; \
			exit 1; \
		fi; \
	fi

treesitter:
	@echo "Ensuring tree-sitter-cpp grammar..."
	@if [ ! -d "$(TREESITTER_DIR)" ]; then \
		git clone https://github.com/tree-sitter/tree-sitter-cpp.git "$(TREESITTER_DIR)"; \
	fi
	@echo "Checking out compatible version v0.20.5..."
	@cd "$(TREESITTER_DIR)" && git checkout v0.20.5
	@echo "Generating parser in $(TREESITTER_DIR)..."
	@cd "$(TREESITTER_DIR)" && npm install --silent && $(TREE_SITTER) generate

extract-metrics:
	@echo "Extracting metrics from Redpanda source code..."
	@mkdir -p $(OUTPUT_DIR)
	$(PYTHON) metrics_extractor.py \
		--recursive \
		--output $(OUTPUT_DIR)/metrics.json \
		--internal-asciidoc $(OUTPUT_DIR)/internal_metrics_reference.adoc \
		--external-asciidoc $(OUTPUT_DIR)/public_metrics_reference.adoc \
		--verbose \
		$(REDPANDA_DIR)/src

generate-comparison:
	@echo "Generating metrics comparison..."
	@if [ -f "$(OUTPUT_DIR)/metrics.json" ]; then \
		$(PYTHON) compare_metrics.py $(OUTPUT_DIR)/metrics.json; \
	else \
		echo "No metrics file found. Run 'make build' first."; \
	fi

clean:
	@echo "Cleaning temporary files and output..."
	rm -rf tmp/
	rm -rf tree-sitter/
	rm -rf $(PYTHON_VENV)/
	rm -rf autogenerated/
	find . -name "*.pyc" -delete
	find . -name "__pycache__" -delete

clean-cache:
	@echo "Cleaning Python cache..."
	find . -name "*.pyc" -delete
	find . -name "__pycache__" -delete

install-system-deps:
	@echo "Installing system dependencies..."
	@echo "Make sure you have the following installed:"
	@echo "  - Python 3.8+"
	@echo "  - git"
	@echo "  - build-essential (on Linux)"
	@echo "  - tree-sitter CLI (optional)"

test:
	@echo "Running tests..."
	$(PYTHON) -m pytest tests/ -v

lint:
	@echo "Running linting..."
	$(PYTHON) -m flake8 *.py
	$(PYTHON) -m black --check *.py

format:
	@echo "Formatting code..."
	$(PYTHON) -m black *.py

# Development targets
dev-setup: setup-venv install-deps
	$(PIP) install pytest flake8 black

dev-test: dev-setup
	make test

# Quick extraction from local Redpanda directory
extract-local:
	@if [ -z "$(REDPANDA_PATH)" ]; then \
		echo "Error: REDPANDA_PATH not set. Usage: make extract-local REDPANDA_PATH=/path/to/redpanda"; \
		exit 1; \
	fi
	@echo "Extracting metrics from local Redpanda at $(REDPANDA_PATH)..."
	@mkdir -p $(OUTPUT_DIR)
	$(PYTHON) metrics_extractor.py \
		--recursive \
		--output $(OUTPUT_DIR)/metrics.json \
		--internal-asciidoc $(OUTPUT_DIR)/internal_metrics_reference.adoc \
		--external-asciidoc $(OUTPUT_DIR)/public_metrics_reference.adoc \
		--filter-namespace redpanda \
		--verbose \
		$(REDPANDA_PATH)/src
